@model List<ProductWithSavedRelationship>
@using Microsoft.AspNetCore.Antiforgery;
@using SuperSold.UI.AspDotNet.Extensions;
@using SuperSold.UI.AspDotNet.ViewRouting;
@inject IAntiforgery antiForgery;

<style>

    .form-container {
        margin: +10px;
    }

    .products-area {
        max-height:45vh;
        overflow:clip;
        overflow-y:scroll;
    }

</style>

@{
    var tokenset = antiForgery.GetAndStoreTokens(Context);
}

@*

//checkmark - confirm understand that it's not real

//Address Information:
- Name
- State
- City
- Postal Code
- Address
- PhoneNumber

//Card Information:
- Card Number
- Name on card
- Expiration date

*@

<form action="#" id="purchaseForm">

    <!--Warning section-->
    <div class="form-container">

        <p>None of the information written below will be stored, and the purchase will only be simulated. This site has been made for learning purposes, and nothing is truly on sale. Said that, the data you type is still sent on purchase confirm, so please use wrong/fake information. Its validity is not actually checked.</p>
        <label class="form-item-label label-checkbox" for="warningCheckbox">
            <input type="checkbox" class="checkbox" name="warningCheckbox"/>
            <span class="checkbox-description">
                I understand everything written above.
            </span>
        </label>

    </div>

    <br/>

    <div class="horizontal-container" style="margin:0px;padding:0px;">

        <!--Left column-->
        <div class="col-8">

            <!--Shipping information area-->
            <div class="horizontal-container form-container">

                <div class="col-5">

                    <div class="form-item">
                        <label for="fullname" class="form-item-label">Name</label>
                        <input type="text" name="fullname" class="form-item-input"/>
                    </div>

                    <div class="form-item">
                        <label for="city" class="form-item-label">City</label>
                        <input type="text" name="city" class="form-item-input" />
                    </div>

                    <div class="form-item">
                        <label for="address" class="form-item-label">Address</label>
                        <input type="text" name="address" class="form-item-input" />
                    </div>

                </div>

                <div class="col-2"></div>

                <div class="col-5">

                    <div class="form-item">
                        <label for="state" class="form-item-label">State</label>
                        <input type="text" name="state" class="form-item-input" />
                    </div>

                    <div class="form-item">
                        <label for="postalCode" class="form-item-label">Postal Code</label>
                        <input type="text" name="postalCode" class="form-item-input" />
                    </div>

                    <div class="form-item">
                        <label for="phoneNumber" class="form-item-label">Phone Number</label>
                        <input type="text" name="phoneNumber" class="form-item-input" />
                    </div>

                </div>

            </div>

            <!--Carted products area-->
            <div class="form-container">
                <div class="products-area">
                    @await Html.RelationshipListPartialView("ReadOnlyRow", Model)
                </div>
            </div>

        </div>

        <!--Right column-->
        <div class="col-4">

            <!--Card information-->
            <div class="form-container">

                <div class="form-item">
                    <label for="cardNumber" class="form-item-label">Card Number</label>
                    <input type="password" name="cardNumber" class="form-item-input" />
                </div>

                <div class="form-item">
                    <label for="nameCard" class="form-item-label">Name on card</label>
                    <input type="text" name="nameCard" class="form-item-input" />
                </div>

                <div class="form-item">
                    <label for="expirationDate" class="form-item-label">Expiration Date</label>
                    <input type="month" name="expirationDate" class="form-item-input"/>
                </div>

            </div>

            <!--Confirm purchase area-->
            <div class="form-container">

                <span>Total: @(Model.Sum(x => x.SavedRelationship.Quantity * x.Product.Price))€</span>
                <input type="submit" id="submitPurchaseBtn" value="Confirm Purchase" class="form-submit-btn"/> 

            </div>

        </div>

    </div>

</form>

<script type="text/javascript">

    $("#submitPurchaseBtn").click(function() {

        var result = $("#purchaseForm").validate({
            debug:true,
            rules: {
                warningCheckbox: {
                    required: true
                },
                fullname: {
                    required: true
                },
                city: {
                    required: true
                },
                address: {
                    required: true
                },
                state: {
                    required: true
                },
                postalCode: {
                    required: true
                },
                phoneNumber: {
                    required: true
                },
                cardNumber: {
                    required: true
                },
                nameCard: {
                    required: true
                },
                expirationDate: {
                    required: true
                }
            },
            messages: {
                warningCheckbox: "Must accept."
            },
            submitHandler: function (form) { submitPurchase(form); }
        });

        console.log(result);

    });

    function submitPurchase(form) {

        var data = $(form).serialize();
        data += "&price=" + '@(Model.Sum(x => x.SavedRelationship.Quantity * x.Product.Price))';
        data += "&products=" + encodeURIComponent(productlist);
        data = data.replace("on", "true");

        $.ajax({
            url: '@Url.Purchase().SubmitPurchase()',
            headers: { "@(tokenset.HeaderName)": "@(tokenset.RequestToken)" },
            data: data,
            type: 'POST',
            cache: false,
        }).done(function(data) {

            alert("Your request has been received! A 'track order' functionality has not been implemented, as everything is only simulated. Thanks for trying out this site!");
            console.log("Purchase completed");
            console.log(data);
            window.location = '@Url.Home().Index()';

        }).fail(function(error) {
            notifyUser("There has been an error processing your request. Error code: " + error.statusCode + " Error Response: " + error.message);
            console.warn(error);
        });

    }

    const productlist = "@(Model.Select(x => x.ToBasicString()).JoinAsStrings(','))";

</script>